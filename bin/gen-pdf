#! /usr/bin/env ruby
#
# Generate a PDF from markdown input (paper.md) in dir
#
# Usage:   gen-pdf [--debug] dir [output.pdf]
#
# Example: ./bin/gen-pdf ./example/logic
#          ./bin/gen-pdf ./example/logic output.pdf
#          ./bin/gen-pdf --debug ./example/logic output.tex
#
# Note that combining --debug with PDF output may lead to an error. See
# https://github.com/jgm/pandoc/issues/5997

class GenPdfError < StandardError
end

rootpath = File.dirname(File.dirname(__FILE__))
$: << File.join(rootpath,'lib')

require 'fileutils'
require 'time'
require 'bhxiv/markdown' # QC methods for YAML header

# p ARGV  # Debug line - uncomment if needed

dir = ARGV.shift
if dir == "--debug"
  dir = ARGV.shift
  is_debug = true
end
unless dir
  $stderr.puts "Error: Directory argument is required"
  $stderr.puts "Usage: gen-pdf [--debug] dir [output.pdf]"
  exit(1)
end

unless File.directory?(dir)
  $stderr.puts "Error: Directory '#{dir}' does not exist or is not a directory"
  exit(1)
end

print "Scanning directory \"#{dir}\" for paper source\n"

outfn = ARGV.shift
outfn = "paper.pdf" unless outfn

$stderr.print("Generating #{outfn}\n")
Dir.chdir(dir) do
  File.unlink(outfn) if File.exist?(outfn)
end

papermd = File.join(dir, "paper.md")
raise GenPdfError, "Cannot find markdown file #{papermd}" unless File.exist?(papermd)

header = md_parser(papermd)
meta = meta_expand(header)
md_meta_checker(meta)

paperbib = File.join(dir, "paper.bib")
unless File.exist?(paperbib)
  $stderr.puts "WARNING: Cannot find bibtex file #{paperbib}, creating empty file"
  `touch #{paperbib}`
end

rootdir = File.expand_path(File.dirname(File.dirname(__FILE__)))
resources = File.join(rootdir, "resources", "biohackrxiv")

# Event metadata is now always taken from the markdown file metadata
EVENT = {
  title: meta['biohackathon_name'],
  URL:   meta['biohackathon_url'],
  location: meta['biohackathon_location']
}

# Get git_url from metadata

git_url = meta['git_url']
raise GenPdfError, "git_url is undefined in metadata - provide 'git_url' in the markdown header as a reference to the git repo" unless git_url

JOURNAL = 'biohackrxiv'
JOURNAL_NAME = 'BioHackrXiv.org'
JOURNAL_URL = 'https://biohackrxiv.org/'
TEX = File.join(resources, "latex.template")
CSL = File.join(resources, "apa-new.csl")
EXTRACT_CITO = File.join(resources, "filters", "extract-cito.lua")
INSERT_CITO = File.join(resources, "filters", "insert-cito-in-ref.lua")
JOURNAL_LOGO = File.join(resources, "logo.png")

time = Time.new
date = time.strftime("%d %b %Y")

cmd = <<~COMMAND
      #{is_debug ? "--verbose" : ""}
      -V journal_name='#{JOURNAL_NAME}'
      -V journal_url='#{JOURNAL_URL}'
      -V logo_path='#{JOURNAL_LOGO}'
      -V year='#{time.year}'
      -V submitted='#{date}'
      -V git_url='#{git_url}'
      -V event_title='#{EVENT[:title]}'
      -V event_url='#{EVENT[:URL]}'
      -V event_location='#{EVENT[:location]}'
      -V geometry:margin=1in
      --from markdown+autolink_bare_uris
      --template '#{TEX}'
      --no-check-certificate
      --csl=#{CSL}
      --lua-filter='#{EXTRACT_CITO}'
      #{paperbib ? "--citeproc" : ""}
      --lua-filter='#{INSERT_CITO}'
      -s
      --output='#{outfn}'
      paper.md
COMMAND


# Build pandoc command
cmd2 = 'pandoc ' + cmd.split(/\s*\n\s*/).join(" ")

print "Changing to directory #{dir}\n"
Dir.chdir(dir) do
  if is_debug
    puts "Executing: #{cmd2}"
  end
  print `#{cmd2}`
  if File.exist?(outfn)
    puts "Generated #{outfn}!"
  else
    # Check if file was created with absolute path
    outfn_absolute = File.join(Dir.pwd, outfn)
    if File.exist?(outfn_absolute)
      puts "Generated #{outfn}!"
    else
      $stderr.puts "Failed to generate #{outfn}!"
      exit(2)
    end
  end
end
